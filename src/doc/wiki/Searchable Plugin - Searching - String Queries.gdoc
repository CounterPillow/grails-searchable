h1. String Queries

Query strings can be simple or complex:

* *@&quot;hello world&quot;@* - matches searchable content containing both &quot;hello&quot; and &quot;world&quot;
* *@&quot;+type:fruit \+(vitamins:c OR vitamins:b1) -color:green calories:\[150 TO \*\]&quot;@* - matches must have a @&quot;fruit&quot;@ value for @type@, must have either @&quot;c&quot;@ or @&quot;b1&quot;@ values for @vitamins@, must not have @&quot;green&quot;@ as a value for @color@ and have a value of at least @150@ for @calories@.

See [Lucene's string query syntax|http://lucene.apache.org/java/2_4_0/queryparsersyntax.html] for more examples.

Some characters are resevered by the query syntax, and can cause query parse exceptions if used incorrectly. To fix this you can provide the *@escape@* option:

{code}
// without &quot;escape: true&quot; would throw ParseException due to trailing &quot; *&quot;
Product.search(&quot;wireless projector *&quot;, escape: true)
{code}

By default @escape@ is @false@ but you can change the default to @true@ globally with [default method options|Searchable Plugin - Configuration].

h3. Advanced String Query Options

As well as the advertised options, search methods additionaly accept the following options when using String queries:

* *@escape@* - If @true@ escapes special query characters. Default is @false@

{code}
search(&quot;[this is a bad query]&quot;, escape: true)
// ==&gt; same as &quot;\[this is a bad query\]&quot;
{code}

* *@defaultProperty@* or *@defaultSearchProperty@* - The searchable property for un-prefixed terms. _Cannot be used with the *@properties@* option._ Default is @&quot;all&quot;@

{code}
search(&quot;tomato soup tags:recipie&quot;, defaultProperty: &quot;name&quot;)
// ==&gt; as if the query was &quot;name:tomato name:soup tags:recipie&quot;
{code}

* *@properties@* - The names of the class properties in which to search. _Cannot be used with the *@defaultProperty@* or *@defaultSearchProperty@* option._ Default is all properties

{code}
search(&quot;Hawaii Five-O&quot;, properties: [&quot;title&quot;, &quot;desc&quot;])
// ==&gt; as if the query was &quot;(desc:hawaii titles:hawaii) (desc:&quot;five o&quot; titles:&quot;five o&quot;)&quot;
{code}

* *@defaultOperator@* - Either @&quot;and&quot;@ or @&quot;or&quot;@. Default is to defer to the global Compass setting, which is @&quot;and&quot;@ if not otherwise set by you.

{code}
search(&quot;mango chutney&quot;, defaultOperator: &quot;or&quot;)
// ==&gt; as if the query was &quot;mango OR chutney&quot;
//     without the option it would be like &quot;mango AND chutney&quot;
{code}

* *@analyzer@* - The name of a query analyzer. With Compass settings, you can define a new default with the name *@search@* and/or additional analyzers with new names. Default is @&quot;search&quot;@

{code}
search(&quot;cowboy john&quot;, analyzer: &quot;special&quot;)
// ==&gt; uses the analyzer configured for name &quot;special&quot;
{code}

* *@parser@* or *@queryParser@* - The name of a query parser. With Compass settings, you can define a new default with the name *@default@* and/or additional parsers with new names. Default is @&quot;default&quot;@

{code}
search(&quot;european bob&quot;, parser: &quot;custom_parser&quot;)
// ==&gt; uses the query parser configured for name &quot;custom_parser&quot;
{code}

