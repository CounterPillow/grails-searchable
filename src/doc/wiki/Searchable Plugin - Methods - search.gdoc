h1. search

h2. Summary

Finds domain object hits for a query.

h2. Syntax

{code}
searchableService.search(String query)
searchableService.search(String query, Map options)
searchableService.search(Map options, String query) // same as previous
searchableService.search(Closure builder)
searchableService.search(Closure builder, Map options)
searchableService.search(Map options, Closure builder) // same as previous
{code}

{code}
DomainClass.search(String query)
DomainClass.search(String query, Map options)
DomainClass.search(Map options, String query) // same as previous
DomainClass.search(Closure builder)
DomainClass.search(Closure builder, Map options)
DomainClass.search(Map options, Closure builder) // same as previous
{code}

h2. Description

Issues a query to the search engine and returns the result.

Normally that result ([return value|Searchable Plugin - Methods - search#Returns]) is a &quot;search result&quot; object, which contains a subset of hits and other data, but you can ask for a different result with the @result@ option.

The query can be specified as either a [String|Searchable Plugin - Searching - String Queries] or 
[Closure|Searchable Plugin - Searching - Query Builder] parameter.

[Options|Searchable Plugin - Methods - search#Options] can be provided to modify the query or result.

h2. Parameters

* *@query@* - A [query String|Searchable Plugin - Searching - String Queries]
* *@builder@* - A [query-buiding Closure|Searchable Plugin - Searching - Query Builder]
* *@options@* - A @Map@ of [options|Searchable Plugin - Methods - search#Options]

h3. Options

h4. Options affecting the search query

* *@sort@* - The field to sort results by (default is @'SCORE'@). [More|Searchable Plugin - Searching - Sorting]
* *@order@* or *@direction@* - The sort order, only used with @sort@ (default is @'auto'@). [More|Searchable Plugin - Searching - Sorting]

h5. Options for String queries

* *@escape@* - Should special characters be escaped? Default is @false@. [More|Searchable Plugin - Searching - String Queries#Advanced String Query Options]
* *@defaultProperty@* or *@defaultSearchProperty@* - The searchable property for un-prefixed terms. Default is @&quot;all&quot;@. [More|Searchable Plugin - Searching - String Queries#Advanced String Query Options]
* *@properties@* - The names of the class properties in which to search. [More|Searchable Plugin - Searching - String Queries#Advanced String Query Options]
* *@defaultOperator@* - Either @&quot;and&quot;@ or @&quot;or&quot;@. Default is @&quot;and&quot;@ unless set otherwise elsewhere. [More|Searchable Plugin - Searching - String Queries#Advanced String Query Options]
* *@analyzer@* - The name of a query analyzer. [More|Searchable Plugin - Searching - String Queries#Advanced String Query Options]
* *@parser@* or *@queryParser@* - The name of a query parser. [More|Searchable Plugin - Searching - String Queries#Advanced String Query Options]

h4. Options affecting the return value

* *@result@* - What should the method return? If defined, one of @&quot;searchResult&quot;@, @&quot;top&quot;@, @&quot;every&quot;@ or @&quot;count&quot;@. Default is @&quot;searchResult&quot;@. (See [Returns|Searchable Plugin - Methods - search#Returns] below)
* *@offset@* - The 0-based start result offset (default 0)
* *@max@* - The maximum number of results to return (default 10). Only used with @result: &quot;searchResult&quot;@ 
* *@reload@* - If @true@, reloads the objects from the database, attaching them to a Hibernate session, otherwise the objects are reconstructed from the index. Default is @false@
* *@withHighlighter@* - A @Closure@ instance that is called for each search result hit to support highlighting. [More|Searchable Plugin - Searching - Highlighting]
* *@suggestQuery@* - Do you want a suggested query with that search result? If @true@ or @Map@ and @result@ is undefined or @&quot;searchResult&quot;@, adds a @suggestedQuery@ property to the search result object. Use a @Map@ value to define nested [@suggestQuery@ options|Searchable Plugin - Methods - suggestQuery#options]. Use @true@ to use the default [@suggestQuery@ options|Searchable Plugin - Methods - suggestQuery#options].

h2. Returns

By default (if @result@ is undefined) or if @result@ is *@&quot;searchResult&quot;@*, returns a &quot;search result&quot; object containing a subset of objects matching the query, with the following properties:

* *@results@* - A @List@ of matching domain objects
* *@scores@* - A @List@ of scores: one for for each entry in *results*
* *@total@* - The total number of hits
* *@offset@* - The 0-based hit object offset
* *@max@* - The maximum number of results _requested_. Note that this may be higher than @results.size()@ if there were fewer hits than requested
* *@suggestedQuery*@ - An alternative query @String@, based on spelling suggestions. _Only if @suggestQuery@ is non-@false@_

If @result@ is *@&quot;every&quot;@*, returns every domain object hit.

If @result@ is *@&quot;top&quot;@*, returns the first domain object hit.

If @result@ is *@&quot;count&quot;@*, returns the number of hits (as if you had used @[countHits|Searchable Plugin - Methods - countHits]@).

The order of the hits is either by relevance (the default) or [a sort you define|Searchable Plugin - Searching - Sorting].

{note}

If you prefer, you can use

* @searchTop(...)@ instead of @search(result: 'top', ...)@
* @searchEvery(...)@ instead of @search(result: 'every', ...)@
* @countHits(...)@ instead of @search(result: 'count', ...)@
{note}

h2. Examples

{code}
// Get the first page of up to 20 domain objects
// matching the query 'Chelsea Florist'
def searchResult = searchableService.search(
    &quot;Chelsea Florist&quot;,
    [offset: 0, max: 20]
)
assert searchResult instanceof Map
println &quot;${searchResult.total} hits:&quot;
for (i in 0..&lt;searchResult.results.size()) {
    println &quot;${searchResult.offset + i + 1}: &quot; +
        &quot;${searchResult.results[i].toString()} &quot; +
        &quot;(score ${searchResult.scores[i]})&quot;
}
{code}

{code}
// Find the lowest priced product matching the query
// '(laser OR L.A.S.E.R.) beam'
def product = Product.search(
    &quot;(laser OR L.A.S.E.R.) beam&quot;, 
    [sort: 'price', order: 'asc', result: 'top']
)
assert product instanceof Product
{code}

{code}
// Get all Articles that contain the terms 
// 'police' OR 'doughnut', giving a higher score
// to items matching 'doughnut', and load from DB
def articles = Article.search(
    &quot;Police doughnut^2.0&quot;,
    [reload: true, result: 'every']
)
assert articles.each { it instanceof Product }
{code}

{code}
// Count the number of domain objects matching 'cow pie'
def count = searchableService.countHits(&quot;cow pie&quot;)
println &quot;There are ${count} hits for query 'cow pie'&quot;
{code}

{code}
// Find other objects like the identified Book
def searchResult = searchableService.moreLikeThis(
    class: Book, id: 2l
)
assert searchResult instanceof Map
println &quot;${searchResult?.results?.size()} similar items found&quot;
{code}

{code}
// Check the spelling in a query
def suggestedQuery = Song.suggestQuery(&quot;living on a preyer&quot;)
println &quot;Did you mean ${suggestedQuery}?&quot;
{code}

{code}
// Get a &quot;search result&quot; object for the given
// closure-defined query across all
// searchable class instances
def searchResult = searchableService.search {
    fuzzy('name', 'lundon')
}
{code}

{code}
// Get every Book relevant to the closure-defined query and
// highlight the &quot;title&quot; and &quot;summary&quot; properties,
// keeping the highlights in a separate List
def highlights = []
def bookHighlighter = { highlighter, index, sr -&gt;
    highlights[index] = [
        title: highlighter.fragment(&quot;title&quot;),
        summary: highlighter.fragment(&quot;summary&quot;)
    ]
}
def books = Book.search(result: 'every', withHighlighter: bookHighlighter) {
    gt('averageReview', 3)
    queryString('learning techniques')
}
{code}

{code}
// With typical suggested query
def searchResult = searchableService.search(&quot;lambda&quot;, suggestQuery: true)
println &quot;did you mean ${searchResult.suggestedQuery}?&quot;
{code}

{code}
// With suggested query, non-default options
def searchResult = Recipie.search(&quot;bacon&quot;, suggestQuery: [escape: true, userFriendly: false])
println &quot;did you mean ${searchResult.suggestedQuery}?&quot;
{code}
