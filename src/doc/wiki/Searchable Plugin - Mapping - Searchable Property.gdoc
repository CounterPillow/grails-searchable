h1. Searchable Property

h2. Summary

Used to map [searchable properties|Searchable Plugin - Mapping - Compass concepts#Searchable Property].

h2. Syntax

{code}
static searchable = {
    propertyName options
}
{code}

h2. Description

Maps the class's @propertyName@ property with the given [options|#Options].

Supports regular properties (those you declare the field for) and synthetic properties (those with no class field but a &quot;getter&quot; method).
 
It is possible to map the same property with multiple different mappings (as long as the mappings are semantically valid), see the [examples|#Examples].

h2. Parameters

* *@options@* - a @Map@ of [options|#Options]

h3. Options

* *@accessor@* - How the property is accessed. One of @&quot;field&quot;@ or @&quot;property&quot;@. Default is @&quot;property&quot;@
* *@analyzer@* - The name of a configured analyzer used to analyze this property. Default is @&quot;default&quot;@ which is a built-in analyzer (Lucene's StandardAnalyzer)
* *@boost@* - A decimal boost value. With a positive value, promotes search results for hits in this property; with a negative value, demotes search results that hit this property. Default is @1.0@
* *@excludeFromAll@* - Whether the property should be excluded from the generated @&quot;all&quot;@ searchable text field in the index. One of @&quot;yes&quot;@, @&quot;no&quot;@ or @&quot;no_analyzed&quot;@
* *@format@* - How the property is formatted when made into searchable text. Applies to objects like @Date@s and @Number@s usually for the purposes of range searches. Value is a format string for the appropriate formatter.
* *@index@* - How or if the property is made into searchable text. One of @&quot;'no&quot;@, @&quot;not_analyzed&quot;@ or @&quot;analyzed&quot;@.
* *@name@* - The name of the field in the search index. Can be used with multiple mappings for the same property, each with their own name. Default is @propertyName@. This becomes the name of the field in the index, so if @name@ is @&quot;title&quot;@, you can target that field with a query like @&quot;title:grails&quot;@
* *@nullValue@* - The value to use if the property is @null@ when indexed.
* *@propertyConverter@* - The name of a configured @ResourcePropertyConverter@ which converts the property from/to searchable text.
* *@reverse@* - Whether the property should be reversed when made searchable. One of @&quot;no&quot;@, @&quot;reader&quot;@ or @&quot;string@&quot;. Default is @&quot;no&quot;@
* *@spellCheck@* - Should the values of the property be included in the spell-check index? Either @&quot;include&quot;@ or @&quot;exclude&quot;@. If not defined then inherits the class's own spell-check mapping.
* *@store@* - Should the value be stored in the index? One of @&quot;yes&quot;@, @&quot;no&quot;@ or @&quot;compress&quot;@. If @&quot;no&quot;@ then the property may still be searchable (depending on the @index@ option), but when re-creating the object for search results this property will always be null. @&quot;compress&quot;@ is useful for large or binary property values. Default is @&quot;yes&quot;@
* *@termVector@* - Should the term-vector data be collected for the property in the index? One of @&quot;yes&quot;@, @&quot;no&quot;@, @&quot;with\_positions@&quot;, @&quot;with\_offsets@&quot;, @&quot;with\_positions\_offsets@&quot;. If not defined inherits the class's term-vector mapping. This is required for [more-like-this|Searchable Plugin - Methods - moreLikeThis] searches.

h2. Examples

{code}
// Give matches in the title field a boost
title boost: 2.0
{code}

{code}
// Format a date property
// so it's easy to search with range queries
createdAt format: &quot;yyyyMMdd&quot;
{code}

{code}
// Format a number property padding with zeroes
// so it's easy to search with range queries
numVotes format: &quot;0000&quot;
{code}

{code}
// Multiple mappings for the same class property, one analyzed the other not
// This means we can search for, say, &quot;tagsExact:Miami&quot; and it would only match the
// exact text &quot;Miami&quot;, not &quot;MiAmi&quot; or &quot;miami&quot; etc.
// And we can search for &quot;tags:Miami&quot; and match any variation 
tags index: 'not\_analyzed', name: 'tagsExact'
tags index: 'analyzed'
{code}