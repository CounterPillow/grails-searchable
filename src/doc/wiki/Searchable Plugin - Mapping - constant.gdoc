h1. constant

h2. Summary

A [class mapping|Searchable Plugin - Mapping - Class Mapping] option that defines constant searchable data for every instance of the class or hierarchy.

h2. Syntax

{code}
constant name: &quot;the\_name&quot;, value: &quot;a value&quot;
{code}

{code}
constant name: &quot;the\_name&quot;, value: &quot;a value&quot;, option: value, option: value
{code}

{code}
constant name: &quot;the\_name&quot;, values: [&quot;a value&quot;, 3, &quot;another value&quot;]
{code}

{code}
constant name: &quot;the\_name&quot;, values: [&quot;a value&quot;, 3, &quot;another value&quot;], option: value, option: value
{code}

h2. Description

Allows you define constant searchable values for every instance of a class or heirarchy, as if you had a class property which had the same value for every instance.

You can define any number of @constant@s within the @searchable@ @Closure@.

Each constant requires a @name@ and @value@ or @values@, allowing you to associate a single or multiple values with a key. The @value@ and @values@ keywords are interchangeable; use whichever is better for you.

This allows you search based on this constant value with a prefix query, eg, @&quot;my\_constant:foo&quot;@ would match if a class had defined a constant with name @&quot;my_constant&quot;@ and whose value is or whose values contains @&quot;foo&quot;@.

Because constants are a bit like fixed-value [searchable properties|Searchable Plugin - Mapping - Compass concepts#Searchable Property] they share similar mapping [options|#Options] to [searchable properties|Searchable Plugin - Mapping - Searchable Property].

h2. Parameters

* *@option@* - The name of an [option|#Options]
* *@value@* - An [option|#Option] value

h3. Options

* *@analyzer@* - The name of a configured analyzer used to analyze this constant. Default is @&quot;default&quot;@ which is a built-in analyzer (Lucene's StandardAnalyzer)
* *@boost@* - A decimal boost value. With a positive value, promotes search results for hits in this constant; with a negative value, demotes search results that hit this constant. Default is @1.0@
* *@excludeFromAll@* - Whether the constant should be excluded from the generated @&quot;all&quot;@ searchable text field in the index. One of @&quot;yes&quot;@, @&quot;no&quot;@ or @&quot;no_analyzed&quot;@
* *@index@* - How or if the constant is made into searchable text. One of @&quot;'no&quot;@, @&quot;not_analyzed&quot;@ or @&quot;analyzed&quot;@.
* *@spellCheck@* - Should the values of the constant be included in the spell-check index? Either @&quot;include&quot;@ or @&quot;exclude&quot;@. If not defined then inherits the class's own spell-check mapping.
* *@store@* - Should the value be stored in the index? One of @&quot;yes&quot;@, @&quot;no&quot;@ or @&quot;compress&quot;@. Setting to @&quot;no&quot;@ does not store the constant in the index and still makes it searchable (depending on the @index@ option). This is best if you do not need to access it from the index itself, eg, with Lucene/Compass. @&quot;compress&quot;@ is useful for large or binary property values. Default is @&quot;yes&quot;@
* *@termVector@* - Should the term-vector data be collected for the constant? One of @&quot;yes&quot;@, @&quot;no&quot;@, @&quot;with\_positions@&quot;, @&quot;with\_offsets@&quot;, @&quot;with\_positions\_offsets@&quot;. If not defined inherits the class's term-vector mapping. This is required for [more-like-this|Searchable Plugin - Methods - moreLikeThis] searches.
* *@converter@* - The name of a configured Converter used to convert the constant value(s) to searchable text

h2. Examples

{code}
static searchable = {
    constant name: &quot;type&quot;, value: &quot;media&quot;, boost: 1.5
    constant name: &quot;capacity&quot;, values: [60, 90, 180]
}
{code}

{code}
static searchable = {
    mapping {
        constant name: &quot;type&quot;, value: &quot;media&quot;, boost: 1.5
        constant name: &quot;capacity&quot;, values: [60, 90, 180]
    }
}
{code}