h1. Searchable Plugin - Controller and view

Searchable Plugin comes with a controller (@SearchableController@) and view (@searchable/index.gsp@). Try these with your application ([like this|Searchable Plugin#Try it!]) - they can help to test queries and you can probably copy some of the code.

{info:title=Customising it}

You could use the @SearchableController@ as it comes, but you will probably want a different URL and HTML results page.

To change the URL add entries to your @grails-app/conf/UrlMappings.groovy@.

To change the view, you can simply keep the plugin's controller and copy @myapp/plugins/searchable-x.x/grails-app/views/searchable/index.gsp@ to @myapp/grails-app/views/searchable/index.gsp@, where it will override the plugin's version.

Or of course you can create your own dedicated search controller and view.
{info}

h2. Under the covers

Here's the implementation of the search action from @SearchableController@:

{code}
import org.compass.core.engine.SearchEngineQueryParseException

// ...

class SearchableController {
    def searchableService

    /**
     * Index page with search form and results
     */
    def index = {
        if (!params.q?.trim()) {
            return [:]
        }
        try {
            return [searchResult: searchableService.search(params.q, params)]
        } catch (SearchEngineQueryParseException ex) {
            return [parseException: true]
        }
    }

    // ...
}
{code}

Notice that @params.q@ is the search query string and @params@ is also given to the @[search|Searchable Plugin - Methods - search]@ method as the second argument. This is a @Map@ of [options|Searchable Plugin - Methods - search#Options] and are things like page size, start result number, etc.

Any String arguments are parsed, so you can use request parameters directly, even when they have string values. For example, @params@ may be @\[escape: &quot;true&quot;, offset: &quot;20&quot;, q: &quot;toast&quot;\]@, but you won't get a ClassCastException.

h3. Pagination of search results in the view

Search results can be paginated using Grail's standard @&lt;g:paginate /&gt;@ tag.

Here it is in action in the Searchable Plugin's own search results page, @grails-app/views/searchable/index.gsp@. The @searchResult@ is an object returned by either @SearchableService#search@ or @DomainClass#search@:

{code:xml}
&lt;g:if test=&quot;${haveResults}&quot;&gt; &lt;!-- or you could use test=&quot;${searchResult?.results}&quot; --&gt;
    Page:
    &lt;g:set var=&quot;totalPages&quot; value=&quot;${Math.ceil(searchResult.total / searchResult.max)}&quot; /&gt;
    &lt;g:if test=&quot;${totalPages == 1}&quot;&gt;
        &lt;span class=&quot;currentStep&quot;&gt;1&lt;/span&gt;
    &lt;/g:if&gt;
    &lt;g:else&gt;
        &lt;g:paginate controller=&quot;searchable&quot; action=&quot;index&quot; params=&quot;[q: params.q]&quot; 
                    total=&quot;${searchResult.total}&quot; prev=&quot;&amp;lt; previous&quot; next=&quot;next &amp;gt;&quot;/&gt;
    &lt;/g:else&gt;
&lt;/g:if&gt;
{code}

And here's some CSS to style the generated HTML:

{code:css}
.paging a.step {
    padding: 0 .3em;
}

.paging span.currentStep {
    font-weight: bold;
}
{code}

h3. Suggested queries

You can easily highlight the difference between the original and a [suggested query|Searchable Plugin - Methods - suggestQuery] with the following in a GSP:

{code}
&lt;%@ page import=&quot;org.codehaus.groovy.grails.plugins.searchable.util.StringQueryUtils&quot; %&gt;

&lt;p&gt;Did you mean 
  &lt;g:link controller=&quot;searchable&quot; action=&quot;index&quot; params=&quot;[q: searchResult.suggestedQuery]&quot;&gt;
${StringQueryUtils.highlightTermDiffs(params.q.trim(), searchResult.suggestedQuery)}
  &lt;/g:link&gt;?
&lt;/p&gt;
{code}

Which results in something like:

Did you mean [*_space_* invader&quot;|http://www.google.com?q=space+invaders]?

See this in action in the plugin's view.