h1. Searchable Plugin

The Searchable Plugin brings rich search features to Grails applications with minimum effort, and gives you power and flexibility when you need it.

It is built on the fantastic [Compass Search Engine Framework|http://www.compass-project.org/] and [Lucene|http://lucene.apache.org/java/docs/index.html] and has the same license as Grails (Apache 2).

The roadmap and issues are tracked in [JIRA|http://jira.codehaus.org/browse/GRAILSPLUGINS].

{note}

Intially the plugin will focus on exposing Groovy domain models.

Support for Java domain classes is on the roadmap but until then, if your Grails application uses Java domain classes, using Compass's native annotations or XML mapping config and [setting up Compass yourself|Compass and Grails how to] may be a better fit at this stage.
{note}

h2. Features

* Maps searchable domain classes to the underlying search index
* Performs a bulk index of all searchable class instances in the database
* Automatically synchronises any changes made through GORM/hibernate with the index
* Provides a @SearchableService@ for easy cross-domain-class searching and index management
* Adds domain class methods for easy per-domain-class searching and index management
* Provides a @SearchableController@ and view for testing queries and demonstrating the Searchable Plugin API
* Follows a Convention over Configuration approach with overridable behaviour where necessary

h1. Quick start

h2. Install the plugin

JDK 1.5+ users:

{code}
grails install-plugin searchable
{code}

JDK 1.4 users:

{code}
grails install-plugin searchable14
{code}

h2. Define Searchable classes

Add a static *searchable* property to the domain classes you want to be stored in the search index, for example:

{code}
class Post {
    static searchable = true              // &lt;-- Make Posts searchable
    static hasMany = [comments: Comment]
    String category, title, post
    User author
    Date createdAt
}
{code}

{code}
class Comment {
    static searchable = true              // &lt;-- Make Comments searchable
    static belongsTo = [post: Post]
    String comment
    Post post
    User user
    Date createdAt
}
{code}

{code}
class User {
    static searchable = true              // &lt;-- Make Users searchable
    static hasMany = [posts: Post]
    String username, password
}
{code}

Declaring *@static searchable = true@* is the simplest way to define your [searchable class mappings|Searchable Plugin - Mapping].

h2. Try it!

Fire up your app... _during startup the plugin will build the search index all for searchable class instances in your database_.

Navigate to [http://localhost:8080/YOUR-APP-NAME-HERE/searchable], and try a few queries. Here's a screenshot from my own app:

!searchable-screenshot2.png!

You just made your domain _searchable_!

h1. Next steps

Hack the [controller and view|Searchable Plugin - SearchableController and view] to your own tastes.

Find what you're looking for with the simple and powerful [search API|Searchable Plugin - Searching] methods.

Customize the [mappings|Searchable Plugin - Mapping] between your classes and the search index.

See how to [manage the index yourself|Searchable Plugin - Managing the index] if you need to; normally you do not, since changes made through Hibernate/GORM are mirrored to the index automatically.

Override defaults and more with [configuration|Searchable Plugin - Configuration]: for example, you could increase the search result page size from 10 to 20.

Trouble-shoot problems with the [debugging|Searchable Plugin - Debugging] tips and [FAQ|Searchable Plugin - FAQ].

\\
\\
_Happy searching!_